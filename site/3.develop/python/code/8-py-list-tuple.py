
# 列表和元组是python中两种常用的数据结构,用于存储多个数据项. 列表和元组都是有序的集合.可以包含不同的元素,但是列表是可变的,元组是不可变的,接下来我们来详细了解列表和元组的使用

# 列表
# 列表是一种可以存储多个值的有序集合,允许修改,增加,删除元素,列表中的元素可以是任何类型,可以相同也可以是不同.

# 类比: 就像一个购物清单,你可以在上面添加,删除,或更改项目

fruits = ["苹果","香蕉","樱桃"]
# print(fruits)

# 列表的操作与特性

# 1. 访问元素: 通过索引访问列表中的元素,索引从0开始
# 2. 修改元素: 可以改变列表中的元素
# 3. 增加元素: 可以向列表中添加新元素
# 4. 删除元素: 可以从列表中移除元素
# 5. 迭代: 可以遍历列表中的所有元素

# 1.通过索引取值
'''
print(fruits[0])
print(fruits[1])
print(fruits[2])
'''
# 2.修改列表元素
'''
fruits[1] = "哈密瓜"
print(fruits) # 输出: ['苹果', '哈密瓜', '樱桃']
'''

# 3.增加列表元素
'''
fruits.append("葡萄")
print(fruits) # ['苹果', '香蕉', '樱桃', '葡萄']
'''

# 4.删除元素
'''
fruits.remove("香蕉")
print(fruits) # ['苹果', '樱桃']
'''

# 5.迭代列表
'''
for fruit in fruits:
  print(fruit)
'''

# 比如我们可以使用列表存储学生的成绩,然后计算平均成绩:

'''
grades = [85, 90, 78, 92, 88]

average_grade = sum(grades) / len(grades)
print(average_grade)
'''

# 元组(Tuple)
# 与列表类似,元组是一种可以存储多个值的有序集合,单元组的元素是不可变的,一旦创建,就不能更改内容

# 就像是身份证信息一旦记录下来就不能更改,而只能重新制作一张新的身份证

# 元组的操作与特性:
# 1. 访问元素: 通过索引可以访问到元组中的任意元素
# 2. 不可变性: 不能修改,增加,或删除元组中的元素
# 3. 可以迭代: 可以遍历元组中的所有元素
# 4. 解包: 可以将元组中的值直接赋予给变量

# 示例:
coordinates = (40.7128, -74.0060)
# print(coordinates)

# 1.访问元素
'''
print(coordinates[0])
'''

# 解包元组
latitude, longitude = coordinates
# print(f"纬度: {latitude}, 经度: {longitude}")

# 比如在实际应用中我们可以使用元组来存储地理位置坐标,然后解包这个元组获取纬度和经度
# 存储多个地理位置坐标
locations = [("纽约", 40.7128, -74.0060), ("伦敦", 51.5074, -0.1278), ("东京", 35.6895, 139.6917)]

for city, lat, long in locations:
  print(f"{city} 的坐标是: 纬度: {lat}, 经度: {long}")

def get_name_and_age():
  name = "Yuki"
  age = 30
  return name, age

name, age = get_name_and_age()
print(f"名字: {name}, 年龄:{age}")

# 列表与元组的选择
# 选择列表或元组,取决于数据是否需要修改.如果数据在创建后不需要修改,使用元组更好;如果需要频繁修改,使用列表更合适.
